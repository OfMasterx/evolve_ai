This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-11T04:35:16.601Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/logo.svg
public/microOff.svg
public/microOn.svg
public/phases/phase1.svg
public/phases/phase2.svg
public/phases/phase3.svg
public/phases/phase4.svg
README.md
src/App.tsx
src/components/aiAssistant/AIAssistant.tsx
src/components/aiAssistant/AIMessage.tsx
src/components/aiAssistant/AiSplineElement.tsx
src/components/aiAssistant/VoiceInput.tsx
src/components/landing/FooterLinks.tsx
src/components/landing/HeadTextBlock.tsx
src/components/landing/Landing.tsx
src/components/landing/phases/Phase.tsx
src/components/landing/phases/Phases.tsx
src/components/landing/SplineElement.tsx
src/components/navbar/BurgerButton.tsx
src/components/navbar/Logo.tsx
src/components/navbar/NavBar.tsx
src/hooks/useAudioProcessing.ts
src/hooks/useVapiCall.ts
src/hooks/useVoiceInput.ts
src/index.css
src/main.tsx
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>Morphis.ai: No-Code AI Agents for Crypto</title>
    <meta
      name="description"
      content="Create, train, and deploy multimodal AI agents for social media, virtual meetings, and on-chain tasks. Tokenize agents and govern them via decentralized communities."
    />

    <!-- Open Graph Meta Tags (for Facebook, LinkedIn, Discord, etc.) -->
    <meta
      property="og:title"
      content="Morphis.ai: Build Autonomous AI Agents for Web3"
    />
    <meta
      property="og:description"
      content="No-code platform for deploying AI agents that post on X, join Zoom calls, and trade crypto. Tokenize workflows and bootstrap decentralized agent economies."
    />
    <meta property="og:site_name" content="Morphis.ai" />
    <meta property="og:image" content="https://morphis.ai/og-image.png" />
    <meta property="og:url" content="https://morphis.ai" />
    <meta property="og:type" content="website" />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content="Morphis.ai: Autonomous AI Agents for Crypto"
    />
    <meta
      name="twitter:description"
      content="Build AI agents that talk, trade, and govern. No coding required. Tokenize agents and let communities own their evolution."
    />
    <meta name="twitter:image" content="https://morphis.ai/og-image.png" />

    <!-- Favicon -->
    <meta property="og:logo" content="https://morphis.ai/logo.svg" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />

    <!-- Canonical URL -->
    <link rel="canonical" href="https://morphis.ai" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "morphis",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "homepage": "https://nazarproton.github.io/evolve_ai/",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "deploy": "gh-pages -d dist"
  },
  "dependencies": {
    "@splinetool/react-spline": "^4.0.0",
    "@tailwindcss/vite": "^4.0.0",
    "@vapi-ai/web": "^2.2.2",
    "dotenv": "^16.4.7",
    "react": "^18.3.1",
    "react-device-detect": "^2.2.3",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.5",
    "react-simple-typewriter": "^5.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/dom-speech-recognition": "^0.0.4",
    "@types/node": "^22.13.1",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "gh-pages": "^6.3.0",
    "globals": "^15.14.0",
    "postcss": "^8.5.1",
    "tailwindcss": "^4.0.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: public/logo.svg
================
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13 0V6H14.3624L16 2.43437L17.6514 6H19V0H17.6651V3.05012L16.7018 0.945107H15.3119L14.3211 3.06444V0H13Z" fill="white"/>
<path d="M13 32V26H14.3624L16 29.5656L17.6514 26H19V32H17.6651V28.9499L16.7018 31.0549H15.3119L14.3211 28.9356V32H13Z" fill="white"/>
<path d="M4.76837e-07 19L6 19L6 17.6376L2.43437 16L6 14.3486L6 13L2.14569e-07 13L2.72918e-07 14.3349L3.05012 14.3349L0.945107 15.2982L0.945107 16.6881L3.06444 17.6789L4.1909e-07 17.6789L4.76837e-07 19Z" fill="white"/>
<path d="M32 19L26 19L26 17.6376L29.5656 16L26 14.3486L26 13L32 13L32 14.3349L28.9499 14.3349L31.0549 15.2982L31.0549 16.6881L28.9356 17.6789L32 17.6789L32 19Z" fill="white"/>
<path d="M2.24063 7.13175L6.8291 11.7202L7.91325 10.6361L6.48962 6.6061L10.5305 8.01878L11.6037 6.94558L7.01527 2.35711L5.95302 3.41936L8.28558 5.75192L5.90922 4.9087L4.80317 6.01475L5.63544 8.42397L3.29193 6.08045L2.24063 7.13175Z" fill="white"/>
<path d="M24.8687 29.7591L20.2803 25.1707L21.3644 24.0865L25.3944 25.5101L23.9817 21.4692L25.0549 20.396L29.6434 24.9845L28.5811 26.0467L26.2486 23.7142L27.0918 26.0905L25.9857 27.1966L23.5765 26.3643L25.92 28.7078L24.8687 29.7591Z" fill="white"/>
<path d="M7.13126 29.7591L11.7197 25.1707L10.6356 24.0865L6.60561 25.5101L8.01829 21.4692L6.94509 20.396L2.35663 24.9845L3.41887 26.0467L5.75143 23.7142L4.90821 26.0905L6.01426 27.1966L8.42348 26.3643L6.07996 28.7078L7.13126 29.7591Z" fill="white"/>
<path d="M29.7594 7.13175L25.1709 11.7202L24.0867 10.6361L25.5104 6.6061L21.4695 8.01878L20.3963 6.94558L24.9847 2.35711L26.047 3.41936L23.7144 5.75192L26.0908 4.9087L27.1968 6.01475L26.3646 8.42397L28.7081 6.08045L29.7594 7.13175Z" fill="white"/>
</svg>

================
File: public/microOff.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.5" y="0.5" width="47" height="47" rx="23.5" stroke="white"/>
<g clip-path="url(#clip0_261_301)">
<path d="M30.3002 17.71C29.9102 17.32 29.2802 17.32 28.8902 17.71L24.0002 22.59L19.1102 17.7C18.7202 17.31 18.0902 17.31 17.7002 17.7C17.3102 18.09 17.3102 18.72 17.7002 19.11L22.5902 24L17.7002 28.89C17.3102 29.28 17.3102 29.91 17.7002 30.3C18.0902 30.69 18.7202 30.69 19.1102 30.3L24.0002 25.41L28.8902 30.3C29.2802 30.69 29.9102 30.69 30.3002 30.3C30.6902 29.91 30.6902 29.28 30.3002 28.89L25.4102 24L30.3002 19.11C30.6802 18.73 30.6802 18.09 30.3002 17.71Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_261_301">
<rect width="24" height="24" fill="white" transform="translate(12 12)"/>
</clipPath>
</defs>
</svg>

================
File: public/microOn.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.5" y="0.5" width="47" height="47" rx="23.5" stroke="white"/>
<path d="M24 27C25.66 27 26.99 25.66 26.99 24L27 18C27 16.34 25.66 15 24 15C22.34 15 21 16.34 21 18V24C21 25.66 22.34 27 24 27ZM30.08 24C29.66 24 29.31 24.3 29.25 24.71C28.88 27.32 26.53 29.1 24 29.1C21.47 29.1 19.12 27.33 18.75 24.71C18.69 24.3 18.33 24 17.92 24C17.4 24 17 24.46 17.07 24.97C17.53 27.94 20.03 30.27 23 30.72V33C23 33.55 23.45 34 24 34C24.55 34 25 33.55 25 33V30.72C27.96 30.29 30.47 27.94 30.93 24.97C31 24.46 30.6 24 30.08 24Z" fill="white"/>
</svg>

================
File: public/phases/phase1.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="32" cy="32" r="31.5" stroke="white" stroke-opacity="0.25"/>
<circle cx="32" cy="32" r="15.5" stroke="white"/>
</svg>

================
File: public/phases/phase2.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="32" cy="32" r="31.5" stroke="white" stroke-opacity="0.25"/>
<circle cx="32" cy="32" r="15.5" stroke="white"/>
<rect x="14.6758" y="49.1169" width="48" height="1" transform="rotate(-45 14.6758 49.1169)" fill="white"/>
<rect x="48.6172" y="49.8242" width="48" height="1" transform="rotate(-135 48.6172 49.8242)" fill="white"/>
</svg>

================
File: public/phases/phase3.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="32" cy="32" r="31.5" stroke="white" stroke-opacity="0.25"/>
<circle cx="32" cy="32" r="4" fill="white"/>
<circle cx="32" cy="32" r="3.5" stroke="white" stroke-opacity="0.25"/>
</svg>

================
File: public/phases/phase4.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="32" cy="32" r="31.5" stroke="white" stroke-opacity="0.25"/>
<circle cx="32" cy="32" r="20" fill="white"/>
<circle cx="32" cy="32" r="19.5" stroke="white" stroke-opacity="0.25"/>
</svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: src/App.tsx
================
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import { Suspense, lazy } from 'react';
import Navbar from './components/navbar/NavBar';

const Landing = lazy(() => import('./components/landing/Landing'));
const AiAssistant = lazy(() => import('./components/aiAssistant/AIAssistant'));

const router = createBrowserRouter([
  {
    path: '/',
    element: <Landing />,
  },
  {
    path: '/demo',
    element: <AiAssistant />,
  },
]);

function App() {
  return (
    <div className="bg-black min-h-screen">
      <Navbar />
      <Suspense
        fallback={
          <div className="w-screen flex justify-center items-center">
            <div className="text-white w-full max-w-[1280px] flex items-center justify-center h-[calc(100dvh-112px)]">
              Loading...
            </div>
          </div>
        }
      >
        <RouterProvider router={router} />
      </Suspense>
    </div>
  );
}

export default App;

================
File: src/components/aiAssistant/AIAssistant.tsx
================
import VoiceInput from './VoiceInput';
import AiSplineElement from './AiSplineElement';
import useVoiceInput from '../../hooks/useVoiceInput';
import useAudioProcessing from '../../hooks/useAudioProcessing';
import AiMessage from './AIMessage';
import FooterLinks from '../landing/FooterLinks';
import { useState, useEffect } from 'react';
import useVapiCall from '../../hooks/useVapiCall';

const assistantId = '9ac36489-6392-452f-8858-bb53ddd3ab37';

const AiAssistant = () => {
  const { listening, startListening } = useVoiceInput();
  const { circleSizeSpline } = useAudioProcessing(listening);
  const { callStatus, assistantSpeaking, startCall, stopCall } = useVapiCall(assistantId);

  useEffect(() => {
    if (listening && callStatus === 'idle') {
      startCall();
    }
  
    let stopTimeout: ReturnType<typeof setTimeout>;
    if (!listening && callStatus !== 'idle') {
      stopTimeout = setTimeout(() => {
        if (!listening) {
          stopCall();
        }
      }, 60000);
    }
  
    return () => {
      if (stopTimeout) clearTimeout(stopTimeout);
    };
  }, [listening, callStatus, startCall, stopCall]);
  

  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  const [AIMessageText] = useState('Hello! My name is AISHA. Ready to talk?');

  return (
    <div className="bg-black text-white w-full px-6 flex flex-col items-center">
      <div
        className={`border w-full items-center justify-center border-white-25 flex flex-col max-w-[1280px] min-[1920px]:max-w-[66.6vw] ${
          isSafari ? 'h-fit' : 'min-h-[596px] h-[calc(100vh-112px-112px)]'
        }`}
      >
        <AiMessage listening={listening} AIMessage={AIMessageText} />
        <AiSplineElement
          listening={listening}
          startListening={startListening}
          circleSize={circleSizeSpline}
          assistantSpeaking={assistantSpeaking}
        />
        <VoiceInput
          listening={listening || callStatus === 'active'}
          startListening={startListening}
          callActive={callStatus === 'active'}
          stopCall={stopCall}
        />
      </div>
      <FooterLinks />
    </div>
  );
};

export default AiAssistant;

================
File: src/components/aiAssistant/AIMessage.tsx
================
import { useEffect, useState } from 'react';

const AiMessage: React.FC<{ listening: boolean; AIMessage: string }> = ({
  listening,
  AIMessage,
}) => {
  const [isVisible, setIsVisible] = useState(true);

  console.log(listening);

  useEffect(() => {
    if (listening) {
      setIsVisible(false);
    }
  }, [listening]);
  return (
    <div
      className={`flex justify-center items-center flex-col font-chivo-mono-light
         transition-opacity ease-out duration-300 ${
           isVisible ? 'opacity-100' : 'opacity-0'
         }`}
    >
      <div className={` bg-red text-white py-2 px-4 `}>{AIMessage}</div>
      <div
        className="w-0 h-0 border-l-8 border-red border-l-transparent 
      border-r-8 border-r-transparent border-t-16 border-t-red-500 transform"
      ></div>
    </div>
  );
};

export default AiMessage;

================
File: src/components/aiAssistant/AiSplineElement.tsx
================
import Spline from '@splinetool/react-spline';
import { useEffect, useState, useRef } from 'react';

interface AiSplineElementProps {
  listening: boolean;
  startListening: () => void;
  circleSize: number;
  assistantSpeaking: boolean;
}

const AiSplineElement = ({
  listening,
  startListening,
  circleSize,
  assistantSpeaking,
}: AiSplineElementProps) => {
  const startEndScale = 0.6666;
  const onStartScale = 0.8333;
  const maxScale = 1;
  const minScale = 0.625;

  const [scale, setScale] = useState(startEndScale);
  const alreadyListeningRef = useRef(false);

  useEffect(() => {
    let newScale = startEndScale;
    const dividerToScale = 110;

    if (listening) {
      if (!alreadyListeningRef.current) {
        setScale(onStartScale);
        alreadyListeningRef.current = true;
      }
      const circleSizeScale = circleSize / dividerToScale;
      if (circleSizeScale > minScale && circleSizeScale < maxScale) {
        newScale = circleSize / dividerToScale;
      } else if (circleSize > maxScale) {
        newScale = maxScale;
      } else {
        newScale = minScale;
      }
      setScale(newScale);
    } else {
      newScale = startEndScale;
      setScale(minScale);
      alreadyListeningRef.current = false;
      const handler = setTimeout(() => setScale(startEndScale), 300);
      return () => clearTimeout(handler);
    }
  }, [circleSize, listening]);

  return (
    <div className="relative w-full min-[384px]:w-[384px] h-[384px] flex justify-center items-center overflow-hidden">
      <div className="relative w-full h-[384px]">
        <Spline
          onClick={startListening}
          style={{
            position: 'absolute',
            width: '100%',
            height: '100%',
            top: '50%',
            left: '50%',
            translate: '-50% -50%',
            transform: `scale(${scale})`,
            transition: 'transform 0.3s ease-out',
            cursor: 'pointer',
          }}
          scene="https://prod.spline.design/moDxSU2YolLqofps/scene.splinecode"
        />
      </div>
      {/* Ripple Element: When assistantSpeaking is true, the CSS classes show the ripple */}
      <div
        className={`absolute inset-0 rounded-full transition-opacity duration-300 ease-out ${
          assistantSpeaking ? 'opacity-100 animate-ripple' : 'opacity-0'
        }`}
      ></div>
    </div>
  );
};

export default AiSplineElement;

================
File: src/components/aiAssistant/VoiceInput.tsx
================
interface VoiceInputProps {
  listening: boolean;
  callActive: boolean;
  startListening: () => void;
  stopCall: () => void;
}

const VoiceInput: React.FC<VoiceInputProps> = ({
  listening,
  callActive,
  startListening,
  stopCall,
}) => {
  const handleClick = () => {
    if (callActive) {
      stopCall();
    } else {
      startListening();
    }
  };
  const displayText = callActive
    ? 'Hang Up'
    : listening
    ? 'Listening'
    : 'Press to Talk';

  return (
    <div className="relative flex w-full flex-col items-center font-chivo-mono-light uppercase">
      <p className="text-white mb-4 text-lg">{displayText}</p>
      <button
        onClick={handleClick}
        className="relative flex items-center justify-center h-[48px] w-[48px] transition-opacity duration-300"
      >
        <div className="absolute inset-0"></div>
        <img
          src={
            callActive
              ? `${import.meta.env.BASE_URL}hangUp.svg`
              : listening
              ? `${import.meta.env.BASE_URL}microOff.svg`
              : `${import.meta.env.BASE_URL}microOn.svg`
          }
          alt={callActive ? 'Hang Up' : listening ? 'Microphone On' : 'Microphone Off'}
          className="w-12 h-12 opacity-25 transition-opacity duration-300 ease-out hover:opacity-100"
        />
      </button>
    </div>
  );
};

export default VoiceInput;

================
File: src/components/landing/FooterLinks.tsx
================
const FooterLinks = () => {
  return (
    <div className="flex justify-center py-8">
      <a href="/" className="group">
        <svg
          width="48"
          height="48"
          viewBox="0 0 48 48"
          fill="currentColor"
          xmlns="http://www.w3.org/2000/svg"
          className="text-red group-hover:text-white transition-colors"
        >
          <path d="M30.3263 13.9039H33.6998L26.3297 22.3274L35 33.7899H28.2112L22.894 26.838L16.8099 33.7899H13.4344L21.3174 24.78L13 13.9039H19.9611L24.7674 20.2583L30.3263 13.9039ZM29.1423 31.7707H31.0116L18.9454 15.8171H16.9395L29.1423 31.7707Z" />
        </svg>
      </a>
      <a
        target="_blank"
        href="https://t.me/+KGisj248CtEwNTU0"
        className="group"
      >
        <svg
          width="48"
          height="48"
          viewBox="0 0 48 48"
          fill="currentColor"
          xmlns="http://www.w3.org/2000/svg"
          className="text-red group-hover:text-white transition-colors"
        >
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M14.5124 22.8488C20.418 20.2759 24.3559 18.5796 26.3263 17.76C31.9521 15.42 33.1211 15.0136 33.883 15.0001C34.0506 14.9972 34.4253 15.0387 34.668 15.2357C34.873 15.402 34.9294 15.6266 34.9563 15.7843C34.9833 15.9419 35.0169 16.3011 34.9902 16.5818C34.6854 19.785 33.3662 27.5585 32.6951 31.1462C32.4111 32.6643 31.852 33.1733 31.3107 33.2231C30.1343 33.3314 29.2409 32.4457 28.1015 31.6988C26.3186 30.53 25.3113 29.8025 23.5807 28.662C21.5806 27.3439 22.8772 26.6195 24.017 25.4356C24.3153 25.1258 29.4986 20.4112 29.5989 19.9835C29.6115 19.93 29.6231 19.7306 29.5046 19.6253C29.3862 19.52 29.2114 19.556 29.0852 19.5847C28.9064 19.6253 26.0581 21.5079 20.5404 25.2326C19.7319 25.7877 18.9996 26.0582 18.3435 26.044C17.6202 26.0284 16.2288 25.6351 15.1945 25.2988C13.9258 24.8865 12.9175 24.6684 13.0053 23.9681C13.0511 23.6033 13.5534 23.2302 14.5124 22.8488Z"
          />
        </svg>
      </a>
    </div>
  );
};

export default FooterLinks;

================
File: src/components/landing/HeadTextBlock.tsx
================
const HeadTextBlock = () => {
  return (
    <div className="flex overflow-visible items-center md:items-start md:justify-start flex-col py-16 lg:py-0 w-10/12 md:w-full lg:w-5/12">
      <h1
        className="w-fit pm-0 md:pl-[25%] lg:pl-0
             min-[500px]:leading-[40px]  min-[500px]:text-[36px]
               min-[1125px]:text-[42px] text-[24px] leading-[32px]
              min-[1125px]:leading-[51px] xl:text-[48px] xl:leading-[60px]"
      >
        <span>Evolve AI.</span>
        <br /> <span className="whitespace-nowrap">Empower creation.</span>
      </h1>
      <div className="flex md:w-full justify-center md:justify-end pr-0 md:pr-[25%] lg:pr-0">
        <button className="relative mt-32 px-6 py-3 text-white group whitespace-nowrap">
          APPLY FOR EARLY ACCESS
          <span className="absolute top-0 right-0 w-6 h-[1px] bg-red transition-all group-hover:w-4"></span>
          <span className="absolute top-0 right-0 h-6 w-[1px] bg-red transition-all group-hover:h-4"></span>
        </button>
      </div>
    </div>
  );
};

export default HeadTextBlock;

================
File: src/components/landing/Landing.tsx
================
import Phases from './phases/Phases';
import FooterLinks from './FooterLinks';
import HeadTextBlock from './HeadTextBlock';
import { lazy } from 'react';
const SplineElement = lazy(() => import('./SplineElement'));

const Landing = () => {
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

  return (
    <div className="bg-black text-white w-full px-6 flex flex-col items-center">
      <div
        className={`border w-full border-white-25 flex flex-col max-w-[1280px] min-[1920px]:max-w-[66.6vw] ${
          isSafari ? 'h-fit' : 'min-h-fit h-[calc(100vh-112px-112px)]'
        }`}
      >
        <div className="flex border-b border-white-25 flex-col-reverse h-full justify-center lg:min-h-[469px] lg:flex-row lg:justify-around items-center">
          <div className="w-1/12"></div>
          <HeadTextBlock />
          <div className="w-1/12"></div>
          <SplineElement />
          <div className="w-1/12 "></div>
        </div>
        <Phases />
      </div>
      <FooterLinks />
    </div>
  );
};

export default Landing;

================
File: src/components/landing/phases/Phase.tsx
================
import { isMobile } from 'react-device-detect';

interface PhaseProps {
  title: string;
  info: string;
  index: number;
  description?: string;
}

const Phase: React.FC<PhaseProps> = ({ title, info, description, index }) => {
  const imageUrl = `${import.meta.env.BASE_URL}phases/phase${index}.svg`;
  if (isMobile) {
    return (
      <div className="h-fit min-h-full bg-black w-full text-white flex flex-col p-8">
        <div className="flex w-full justify-end items-end">
          <img
            src={imageUrl}
            alt="Arrow"
            className="w-16 h-16 group-hover:rotate-180 transition-all duration-500"
          />
        </div>
        <p className="text-2xl font-chivo-mono-thiner pt-[30px]">{title}</p>
        <p className="text-xl">{info}</p>
        {description && (
          <p className="text-sm pt-2 font-chivo-mono-light">{description}</p>
        )}
      </div>
    );
  }

  return (
    <div className="h-[218px] bg-black w-full group overflow-hidden relative text-white">
      <div className="absolute p-8 group-hover:-top-[126px] top-0 left-0 w-full h-full transition-all duration-300">
        <div className="flex justify-end items-end">
          <img
            src={imageUrl}
            alt="Arrow"
            className="w-16 h-16 group-hover:rotate-180 transition-all duration-300"
          />
        </div>
        <div className="flex flex-col items-start pt-[30px]">
          <p className="text-start font-chivo-mono-thiner text-2xl leading-[30px] group-hover:opacity-0 transition-all duration-300">
            {title}
          </p>
          <p className="text-start text-2xl lg:text-xl leading-[30px] min-[1170px]:text-2xl whitespace-nowrap">
            {info}
          </p>
          <p className="text-start text-[12px] font-chivo-mono-light leading-[18px] pt-10 group-hover:pt-4 transition-all duration-300">
            {description}
          </p>
        </div>
      </div>
    </div>
  );
};

export default Phase;

================
File: src/components/landing/phases/Phases.tsx
================
import Phase from './Phase';

const phasesData = [
  {
    title: 'PHASE 1:',
    info: 'DATA GATHERING',
    description:
      'Curate datasets to define agent behavior: personality matrices, scenario responses, and voice synthesis. Fine-tune decision trees with structured or unstructured inputs.',
  },
  {
    title: 'PHASE 2:',
    info: 'TESTING',
    description:
      'Simulate agent behavior in a sandbox environment—stress-test responses, audit for bias, and validate logic before releasing it to real-world platforms.',
  },
  {
    title: 'PHASE 3:',
    info: 'DEPLOYMENT',
    description:
      'Connect your agent to X (Twitter), Zoom, or custom APIs. Monitor its autonomous execution via real-time dashboards and performance analytics.',
  },
  {
    title: 'PHASE 4:',
    info: 'TOKENIZATION',
    description:
      'Mint an ERC-20/SPL token for your agent. Design tokenomics, deploy liquidity pools, and let token holders govern its evolution.',
  },
];

const Phases = () => {
  return (
    <div className="grid h-fit gap-[1px] sm:grid-cols-2 grid-cols-1 lg:grid-cols-4 bg-white-25">
      {phasesData.map((phase, index) => (
        <Phase key={index} index={index + 1} {...phase} />
      ))}
    </div>
  );
};

export default Phases;

================
File: src/components/landing/SplineElement.tsx
================
import Spline from '@splinetool/react-spline';
import { isMobile } from 'react-device-detect';

const SplineElement = () => {
  return (
    <div
      className={`flex relative justify-center items-center min-[640px]:mt-0 mt-8 z-10 w-full lg:w-1/3  h-[406px]`}
    >
      <Spline
        className={`sm:min-w-[406px] `}
        scene="https://prod.spline.design/moDxSU2YolLqofps/scene.splinecode"
      />
      <div
        className={`absolute inset-0 ${
          isMobile ? 'block' : 'hidden'
        } bg-white opacity-0 transition-opacity duration-300 ease-out rounded-full`}
      ></div>
    </div>
  );
};

export default SplineElement;

================
File: src/components/navbar/BurgerButton.tsx
================
import { Dispatch, SetStateAction } from 'react';

const BurgerButton = ({
  setMenuOpen,
  menuOpen,
  isInBurger,
}: {
  setMenuOpen: Dispatch<SetStateAction<boolean>>;
  menuOpen: boolean;
  isInBurger?: boolean;
}) => {
  return (
    <button
      className={`relative  w-6 h-6  flex items-center justify-center ${
        isInBurger ? 'z-20' : 'lg:hidden'
      }`}
      onClick={() => setMenuOpen(!menuOpen)}
    >
      <span
        className={`absolute transition-opacity transform text-2xl ${
          menuOpen ? 'opacity-0 scale-90' : 'opacity-100 scale-100'
        }`}
      >
        ☰
      </span>
      <span
        className={`absolute transition-opacity transform text-2xl duration-300 ${
          menuOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-90'
        }`}
      >
        ✕
      </span>
    </button>
  );
};

export default BurgerButton;

================
File: src/components/navbar/Logo.tsx
================
const Logo = () => {
  return (
    <a
      href="/"
      className="text-xl font-bold flex justify-center items-center gap-[14px]"
    >
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        fill="none"
        className="spin-slow"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M19.5 0V9H21.5436L24 3.65155L26.4771 9H28.5V0H26.4977V4.57518L25.0528 1.41766H22.9679L21.4817 4.59666V0H19.5Z"
          fill="white"
        />
        <path
          d="M19.5 48V39H21.5436L24 44.3484L26.4771 39H28.5V48H26.4977V43.4248L25.0528 46.5823H22.9679L21.4817 43.4033V48H19.5Z"
          fill="white"
        />
        <path
          d="M9.53674e-07 28.5L9 28.5L9 26.4564L3.65155 24L9 21.5229L9 19.5L5.60272e-07 19.5L6.47795e-07 21.5023L4.57518 21.5023L1.41766 22.9472L1.41766 25.0321L4.59666 26.5183L8.67054e-07 26.5183L9.53674e-07 28.5Z"
          fill="white"
        />
        <path
          d="M48 28.5L39 28.5L39 26.4564L44.3484 24L39 21.5229L39 19.5L48 19.5L48 21.5023L43.4248 21.5023L46.5823 22.9472L46.5823 25.0321L43.4033 26.5183L48 26.5183L48 28.5Z"
          fill="white"
        />
        <path
          d="M3.36095 10.6976L10.2437 17.5803L11.8699 15.9541L9.73443 9.90915L15.7958 12.0282L17.4056 10.4184L10.5229 3.53567L8.92953 5.12904L12.4284 8.62788L8.86383 7.36304L7.20475 9.02212L8.45317 12.6359L4.9379 9.12068L3.36095 10.6976Z"
          fill="white"
        />
        <path
          d="M37.3031 44.6386L30.4204 37.7559L32.0466 36.1296L38.0916 38.2651L35.9726 32.2037L37.5824 30.5939L44.4651 37.4766L42.8717 39.07L39.3728 35.5711L40.6377 39.1357L38.9786 40.7948L35.3648 39.5463L38.8801 43.0616L37.3031 44.6386Z"
          fill="white"
        />
        <path
          d="M10.6969 44.6386L17.5796 37.7559L15.9534 36.1296L9.90842 38.2651L12.0274 32.2037L10.4176 30.5939L3.53494 37.4766L5.12831 39.07L8.62715 35.5711L7.36231 39.1357L9.02139 40.7948L12.6352 39.5463L9.11995 43.0616L10.6969 44.6386Z"
          fill="white"
        />
        <path
          d="M44.639 10.6976L37.7563 17.5803L36.1301 15.9541L38.2656 9.90915L32.2042 12.0282L30.5944 10.4184L37.4771 3.53567L39.0705 5.12904L35.5716 8.62788L39.1362 7.36304L40.7952 9.02212L39.5468 12.6359L43.0621 9.12068L44.639 10.6976Z"
          fill="white"
        />
      </svg>

      <svg
        width="97"
        height="22"
        viewBox="0 0 97 22"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M90.3748 17.5145C89.5644 17.5145 88.7851 17.4291 88.0371 17.2581C87.3046 17.0872 86.6579 16.8153 86.0968 16.4424C85.5358 16.0539 85.0916 15.5567 84.7643 14.9507C84.4371 14.3447 84.2734 13.6067 84.2734 12.7365C84.2734 12.6744 84.2734 12.6045 84.2734 12.5268C84.2734 12.4335 84.2812 12.3481 84.2968 12.2704H86.6111C86.5955 12.3636 86.5877 12.4491 86.5877 12.5268C86.5877 12.6045 86.5877 12.6899 86.5877 12.7831C86.5877 13.4202 86.7436 13.9407 87.0553 14.3447C87.367 14.7487 87.8033 15.044 88.3644 15.2304C88.9254 15.4169 89.58 15.5101 90.328 15.5101C91.0761 15.5101 91.7228 15.4324 92.2683 15.277C92.8137 15.1061 93.2345 14.8264 93.5306 14.438C93.8423 14.0495 93.9982 13.5367 93.9982 12.8997C93.9982 12.3248 93.8267 11.8664 93.4839 11.5246C93.141 11.1827 92.6891 10.9108 92.128 10.7088C91.5826 10.4913 90.9748 10.297 90.3046 10.1261C89.6501 9.95519 88.9877 9.76873 88.3176 9.56674C87.6631 9.36474 87.0553 9.10059 86.4942 8.77429C85.9488 8.44799 85.5046 8.01292 85.1617 7.46908C84.8189 6.9097 84.6475 6.20272 84.6475 5.34811C84.6475 4.36921 84.9124 3.56122 85.4423 2.92415C85.9721 2.28709 86.6734 1.82094 87.5462 1.52572C88.4189 1.21495 89.3774 1.05957 90.4215 1.05957C91.4657 1.05957 92.4163 1.21495 93.2735 1.52572C94.1306 1.82094 94.8086 2.29486 95.3073 2.94746C95.8215 3.58453 96.0787 4.43136 96.0787 5.48796V5.79095H93.8111V5.41804C93.8111 4.88974 93.6631 4.4469 93.367 4.08952C93.0865 3.7166 92.6891 3.43692 92.1748 3.25046C91.6761 3.064 91.0916 2.97077 90.4215 2.97077C89.7981 2.97077 89.2371 3.04846 88.7384 3.20384C88.2397 3.35922 87.8423 3.60007 87.5462 3.92637C87.2657 4.25267 87.1254 4.67997 87.1254 5.20827C87.1254 5.75211 87.289 6.18718 87.6163 6.51348C87.9592 6.83978 88.4033 7.10393 88.9488 7.30593C89.5098 7.49239 90.1254 7.66331 90.7955 7.81869C91.4657 7.97407 92.128 8.15276 92.7826 8.35476C93.4527 8.55675 94.0605 8.8209 94.6059 9.14721C95.167 9.47351 95.6189 9.91635 95.9618 10.4757C96.3202 11.0196 96.4995 11.7188 96.4995 12.5734C96.4995 13.7698 96.2267 14.7332 95.6813 15.4635C95.1514 16.1782 94.4189 16.6988 93.4839 17.0251C92.5644 17.3514 91.528 17.5145 90.3748 17.5145Z"
          fill="white"
        />
        <path
          d="M71.8467 17.2813V15.3701H75.1194V3.20368H71.8467V1.29248H80.8701V3.20368H77.5973V15.3701H80.8701V17.2813H71.8467Z"
          fill="white"
        />
        <path
          d="M57.3389 17.2813V0.5H59.6765V6.95612C60.0817 6.35013 60.6116 5.89952 61.2662 5.6043C61.9207 5.29353 62.5986 5.13815 63.2999 5.13815C64.0947 5.13815 64.8038 5.29353 65.4272 5.6043C66.0662 5.91506 66.5649 6.38121 66.9233 7.00274C67.2818 7.62427 67.461 8.40894 67.461 9.35677V17.2813H65.1233V9.86954C65.1233 8.89063 64.8895 8.16033 64.422 7.67865C63.9545 7.18143 63.3155 6.93282 62.5051 6.93282C61.9752 6.93282 61.4921 7.06489 61.0558 7.32904C60.6194 7.57765 60.2765 7.92726 60.0272 8.37787C59.7934 8.81294 59.6765 9.31016 59.6765 9.86954V17.2813H57.3389Z"
          fill="white"
        />
        <path
          d="M43.439 21.5002V5.3715H45.3325L45.5896 7.07293C45.9325 6.43587 46.4156 5.95418 47.039 5.62788C47.6779 5.30158 48.4338 5.13843 49.3065 5.13843C50.2104 5.13843 51.013 5.35596 51.7143 5.79103C52.4312 6.21056 52.9923 6.86317 53.3974 7.74885C53.8182 8.63452 54.0286 9.78435 54.0286 11.1983V11.5013C54.0286 12.8065 53.8104 13.9097 53.3741 14.811C52.9377 15.6966 52.3533 16.3725 51.6208 16.8387C50.9039 17.2893 50.1013 17.5146 49.213 17.5146C48.4182 17.5146 47.7247 17.367 47.1325 17.0718C46.5559 16.7765 46.1039 16.4114 45.7766 15.9763V21.5002H43.439ZM48.7455 15.8365C49.6026 15.8365 50.3039 15.5257 50.8494 14.9042C51.3948 14.2827 51.6676 13.3193 51.6676 12.0141V10.6623C51.6676 9.71443 51.5351 8.96082 51.2702 8.40145C51.0052 7.84207 50.6468 7.43808 50.1948 7.18947C49.7585 6.92532 49.2754 6.79325 48.7455 6.79325C48.2312 6.79325 47.7481 6.91755 47.2961 7.16616C46.8442 7.39924 46.4779 7.80323 46.1974 8.37814C45.9169 8.93752 45.7766 9.69889 45.7766 10.6623V12.0141C45.7766 13.3193 46.0572 14.2827 46.6182 14.9042C47.1792 15.5257 47.8883 15.8365 48.7455 15.8365Z"
          fill="white"
        />
        <path
          d="M31.3854 17.2815V7.18947H28.3698V5.3715H33.2789L33.3958 7.11955C33.6763 6.49802 34.1049 6.01634 34.6815 5.6745C35.2737 5.31712 35.9517 5.13843 36.7153 5.13843C37.8841 5.13843 38.7802 5.48804 39.4036 6.18726C40.0426 6.87094 40.3621 7.74885 40.3621 8.82098C40.3621 8.9919 40.3543 9.15505 40.3387 9.31044C40.3387 9.45028 40.3231 9.6212 40.2919 9.82319H38.3049V9.33374C38.3049 8.91421 38.2192 8.52576 38.0478 8.16838C37.8919 7.811 37.6426 7.52354 37.2997 7.30601C36.9724 7.07293 36.5439 6.9564 36.014 6.9564C35.4997 6.9564 35.0633 7.10401 34.7049 7.39924C34.362 7.69446 34.1049 8.06738 33.9335 8.51799C33.762 8.96859 33.6763 9.44251 33.6763 9.93973V17.2815H31.3854ZM28.2529 17.2815V15.4869H39.0296V17.2815H28.2529Z"
          fill="white"
        />
        <path
          d="M20.2903 17.5146C19.1371 17.5146 18.1475 17.2582 17.3215 16.7455C16.4955 16.2327 15.8644 15.5257 15.428 14.6245C14.9916 13.7077 14.7734 12.6745 14.7734 11.5246V11.1284C14.7734 9.9475 14.9916 8.90644 15.428 8.00523C15.8644 7.10401 16.4955 6.40479 17.3215 5.90757C18.1475 5.39481 19.1293 5.13843 20.267 5.13843C21.4358 5.13843 22.4332 5.39481 23.2592 5.90757C24.0852 6.42033 24.7163 7.12732 25.1527 8.02853C25.5891 8.92975 25.8073 9.96304 25.8073 11.1284V11.5246C25.8073 12.7055 25.5891 13.7466 25.1527 14.6478C24.7163 15.549 24.0852 16.256 23.2592 16.7688C22.4332 17.266 21.4436 17.5146 20.2903 17.5146ZM20.2903 15.8598C21.1942 15.8598 21.9345 15.5335 22.5111 14.8809C23.0878 14.2127 23.3761 13.2882 23.3761 12.1073V10.5457C23.3761 9.36482 23.0878 8.44807 22.5111 7.79546C21.9345 7.12732 21.1942 6.79325 20.2903 6.79325C19.402 6.79325 18.6618 7.12732 18.0696 7.79546C17.4929 8.44807 17.2046 9.36482 17.2046 10.5457V12.1073C17.2046 13.2882 17.4929 14.2127 18.0696 14.8809C18.6618 15.5335 19.402 15.8598 20.2903 15.8598Z"
          fill="white"
        />
        <path
          d="M0.5 17.2815V5.3715H1.87923L2.11299 6.70002C2.34676 6.18726 2.67404 5.7988 3.09482 5.53465C3.53118 5.2705 3.99872 5.13843 4.49742 5.13843C5.02729 5.13843 5.49483 5.27827 5.90002 5.55796C6.32081 5.83765 6.63249 6.24941 6.83509 6.79325C7.11561 6.24941 7.45847 5.83765 7.86367 5.55796C8.28445 5.27827 8.79874 5.13843 9.40653 5.13843C10.2637 5.13843 10.9182 5.41035 11.3702 5.95418C11.8377 6.49802 12.0715 7.27493 12.0715 8.28491V17.2815H10.0611V8.70444C10.0611 7.53908 9.62472 6.9564 8.75198 6.9564C8.3312 6.9564 7.98055 7.11955 7.70003 7.44585C7.41951 7.77215 7.27925 8.19168 7.27925 8.70444V17.2815H5.29223V8.70444C5.29223 7.53908 4.84028 6.9564 3.93638 6.9564C3.5156 6.9564 3.16495 7.11955 2.88443 7.44585C2.61949 7.77215 2.48702 8.19168 2.48702 8.70444V17.2815H0.5Z"
          fill="white"
        />
      </svg>
    </a>
  );
};

export default Logo;

================
File: src/components/navbar/NavBar.tsx
================
import { useEffect, useState } from 'react';
import Logo from './Logo';
import BurgerButton from './BurgerButton';

const Navbar = () => {
  const [menuOpen, setMenuOpen] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);

  useEffect(() => {
    const handleScrollLock = (event: Event) => {
      event.preventDefault();
    };

    if (menuOpen) {
      setScrollPosition(window.scrollY);

      window.addEventListener('scroll', handleScrollLock);
      window.addEventListener('wheel', handleScrollLock, { passive: false });
      window.addEventListener('touchmove', handleScrollLock, {
        passive: false,
      });
    } else {
      window.removeEventListener('scroll', handleScrollLock);
      window.removeEventListener('wheel', handleScrollLock);
      window.removeEventListener('touchmove', handleScrollLock);
    }

    return () => {
      window.removeEventListener('scroll', handleScrollLock);
      window.removeEventListener('wheel', handleScrollLock);
      window.removeEventListener('touchmove', handleScrollLock);
    };
  }, [menuOpen, scrollPosition]);

  return (
    <nav className="flex relative justify-center items-center px-6 py-8 bg-black text-white">
      <div className="flex justify-between items-center max-w-[1280px] min-[1920px]:max-w-[66.6vw] w-full">
        <Logo />
        <ul className="hidden lg:flex w-fit">
          <li>
            <a href="#" className="nav-item soon">
              Explore
            </a>
          </li>
          <li>
            <a href="#" className="nav-item soon">
              Create
            </a>
          </li>
          <li>
            <a href="#" className="nav-item soon">
              Incubator
            </a>
          </li>
          <li>
            <a href="#" className="nav-item">
              Docs
            </a>
          </li>
        </ul>
        <div className="hidden lg:flex">
          <button
            style={{ cursor: 'not-allowed' }}
            disabled
            className="px-4 py-3 relative text-white/25 cursor-not-allowed transition-colors"
          >
            BUY $MORPH
          </button>
          <button className="bg-red  hover:text-red hover:bg-white px-4 py-2  transition-colors">
            CONNECT WALLET{' '}
          </button>
        </div>
      </div>
      <BurgerButton setMenuOpen={setMenuOpen} menuOpen={menuOpen} />
      <div
        className={`fixed top-0 w-screen h-screen ${
          menuOpen ? 'z-[15]' : '-z-[1]'
        } backdrop-blur-xl transition-all`}
      ></div>

      <div
        className={`fixed w-full h-screen ${
          menuOpen ? 'top-0' : '-top-[130%]'
        } left-0 z-20 bg-black text-white space-y-4 px-6 py-8 transition-all duration-[0.6s] ease-in-out`}
      >
        <div className="flex justify-between items-center w-full">
          <Logo />
          <BurgerButton
            setMenuOpen={setMenuOpen}
            menuOpen={menuOpen}
            isInBurger
          />
        </div>
        <ul
          className={`w-full flex flex-col h-[calc(100dvh-176px-12px)] gap-8 pt-8`}
        >
          <li>
            <a href="#" className="hover:text-red relative soon-mobile">
              Explore
            </a>
          </li>
          <li>
            <a href="#" className="hover:text-red relative soon-mobile">
              Create
            </a>
          </li>
          <li>
            <a href="#" className="hover:text-red relative soon-mobile">
              Incubator
            </a>
          </li>
          <li>
            <a href="#" className="hover:text-red">
              Docs
            </a>
          </li>
          <li className="pt-8">
            <a href="#" className="hover:text-red relative soon-mobile">
              BUY $MORPH
            </a>
          </li>
        </ul>
        <button className="px-4 py-3 w-full bg-red hover:text-red hover:bg-white transition-colors">
          Connect Wallet
        </button>
      </div>
    </nav>
  );
};

export default Navbar;

================
File: src/hooks/useAudioProcessing.ts
================
import { useState, useRef, useEffect } from 'react';

const useAudioProcessing = (listening: boolean) => {
  const [circleSizeSpline, setCircleSizeSpline] = useState(20);
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const microphoneRef = useRef<MediaStreamAudioSourceNode | null>(null);
  const mediaStreamRef = useRef<MediaStream | null>(null);
  const isProcessingRef = useRef<boolean>(false);
  const lastUpdateRef = useRef<number>(Date.now());

  useEffect(() => {
    if (listening) {
      startAudioProcessing();
    } else {
      stopAudioProcessing();
    }
  }, [listening]);

  const startAudioProcessing = async () => {
    try {
      if (
        audioContextRef.current &&
        audioContextRef.current.state !== 'closed'
      ) {
        return;
      }

      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaStreamRef.current = stream;

      const audioContext = new AudioContext();
      const analyser = audioContext.createAnalyser();
      const microphone = audioContext.createMediaStreamSource(stream);
      const gainNode = audioContext.createGain();

      microphone.connect(gainNode);
      gainNode.connect(analyser);
      analyser.fftSize = 512;

      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);

      audioContextRef.current = audioContext;
      analyserRef.current = analyser;
      microphoneRef.current = microphone;
      isProcessingRef.current = true;

      const processVolume = () => {
        if (!isProcessingRef.current) return;

        const now = Date.now();
        if (now - lastUpdateRef.current < 50) {
          requestAnimationFrame(processVolume);
          return;
        }

        analyser.getByteTimeDomainData(dataArray);

        let sum = 0;
        for (let i = 0; i < bufferLength; i++) {
          const value = (dataArray[i] - 128) / 128;
          sum += value * value;
        }

        const rms = Math.sqrt(sum / bufferLength);
        const targetSize = Math.max(80, Math.min(250, 80 + rms * 600));

        setCircleSizeSpline(
          (prevSize) => prevSize + (targetSize - prevSize) * 0.8
        );

        lastUpdateRef.current = now;
        requestAnimationFrame(processVolume);
      };

      processVolume();
    } catch (error) {
      console.error('Microphone access error', error);
    }
  };

  const stopAudioProcessing = () => {
    isProcessingRef.current = false;

    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
      audioContextRef.current.close().catch(() => {});
      audioContextRef.current = null;
    }

    analyserRef.current = null;
    microphoneRef.current = null;

    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach((track) => track.stop());
      mediaStreamRef.current = null;
    }
  };

  return { circleSizeSpline };
};

export default useAudioProcessing;

================
File: src/hooks/useVapiCall.ts
================
// src/hooks/useVapiCall.ts
import { useState, useEffect } from 'react';
import Vapi from '@vapi-ai/web';

export const useVapiCall = (assistantId: string) => {
  const [vapi] = useState(() => new Vapi(import.meta.env.VITE_VAPI_PUBLIC_KEY));
  const [callStatus, setCallStatus] = useState<'idle' | 'connecting' | 'active'>('idle');
  const [assistantSpeaking, setAssistantSpeaking] = useState(false);

  useEffect(() => {
    const handleCallStart = () => {
      setCallStatus('active');
    };

    const handleCallEnd = () => {
      setCallStatus('idle');
    };

    const handleSpeechStart = () => {
      setAssistantSpeaking(true);
    };

    const handleSpeechEnd = () => {
      setAssistantSpeaking(false);
    };

    const handleError = (error: Error) => {
      console.error('Vapi error:', error);
      setCallStatus('idle');
    };

    vapi.on('call-start', handleCallStart);
    vapi.on('call-end', handleCallEnd);
    vapi.on('speech-start', handleSpeechStart);
    vapi.on('speech-end', handleSpeechEnd);
    vapi.on('error', handleError);

    // Cleanup when the hook unmounts
    return () => {
      vapi.stop();
    };
  }, [vapi]);

  const startCall = () => {
    if (callStatus === 'idle') {
      setCallStatus('connecting');
      vapi.start(assistantId, {}); // You can add extra options as needed
    }
  };

  const stopCall = () => {
    if (callStatus !== 'idle') {
      vapi.stop();
    }
  };

  return { callStatus, assistantSpeaking, startCall, stopCall };
};

export default useVapiCall;

================
File: src/hooks/useVoiceInput.ts
================
import { useState, useRef } from 'react';

const useVoiceInput = () => {
  const [listening, setListening] = useState(false);
  const [recognizedText, setRecognizedText] = useState('');
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  const startListening = async () => {
    if (listening) {
      stopListening();
      return;
    }

    const SpeechRecognitionAPI =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognitionAPI) {
      alert(`Your browser does not support voice input  😞`);
      return;
    }

    recognitionRef.current = new SpeechRecognitionAPI();
    recognitionRef.current.lang = 'uk-UA';
    recognitionRef.current.interimResults = false;

    recognitionRef.current.onstart = () => {
      setListening(true);
      setRecognizedText('');
    };

    recognitionRef.current.onend = () => {
      setListening(false);
    };

    recognitionRef.current.onresult = (event: SpeechRecognitionEvent) => {
      const text = event.results[0][0].transcript;
      setRecognizedText(text);
    };

    recognitionRef.current.start();
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  return { listening, recognizedText, startListening, stopListening };
};

export default useVoiceInput;

================
File: src/index.css
================
@import 'tailwindcss';

@font-face {
  font-family: 'ChivoMono';
  src: url('/fonts/ChivoMono-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'ChivoMono';
  src: url('/fonts/ChivoMono-Light.woff2') format('woff2');
  font-weight: 300;
  font-style: normal;
}
@font-face {
  font-family: 'ChivoMono';
  src: url('/fonts/ChivoMono-Thin.woff2') format('woff2');
  font-weight: 200;
  font-style: normal;
}

@theme {
  --color-*: initial;
  --color-white: #fff;
  --color-white-25: rgba(255, 255, 255, 0.25);
  --color-black: #000;
  --color-red: #f13d3d;
}

:root {
  --custom-red: #f13d3d;
}
body {
  margin: 0;
  padding: 0;
  font-family: 'ChivoMono', monospace;
  font-size: 16px;
  button {
    cursor: pointer;
  }
  min-width: 360px;
  min-height: 360px;
  background-color: black;
}

.font-chivo-mono {
  font-family: 'ChivoMono', monospace;
  font-weight: normal;
}

.font-chivo-mono-light {
  font-family: 'ChivoMono', monospace;
  font-weight: 300;
}

.font-chivo-mono-thin {
  font-family: 'ChivoMono', monospace;
  font-weight: 200;
}
.font-chivo-mono-thiner {
  font-family: 'ChivoMono', monospace;
  font-weight: 100;
}

.nav-item {
  @apply relative py-3 lg:px-8 text-white inline-block;
}

.nav-item {
  position: relative;
  font-weight: 300;
}

.nav-item::after {
  content: '';
  position: absolute;
  bottom: 4px;
  left: 50%;
  width: 16px;
  height: 1px;
  background-color: var(--custom-red);
  transform: translateX(-50%);
  opacity: 0;
  transition: opacity 0.15s ease-in-out;
}

.soon::before,
.soon-left::before,
.soon-mobile::before {
  content: 'soon';
  position: absolute;
  font-weight: 400;
  color: var(--custom-red);
  font-size: 12px;
}

.soon::before {
  top: 0;
  right: 0;
}

.soon-left::before {
  top: 0;
  left: -16px;
}

.soon-mobile::before {
  top: -16px;
  right: -32px;
}

.nav-item:hover::after {
  opacity: 1;
}

@keyframes rotate360 {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.spin-slow {
  animation: rotate360 7s linear infinite;
}

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App.tsx';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
});



================================================================
End of Codebase
================================================================
